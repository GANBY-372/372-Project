Boolean addIncomingVehicle(json vehicle_file){
    if dealer has acquisition enabled:
        Vehicle vehicle = JSONParse(vehicle_file); //Have to figure out how to assign all attributes correctly
        try{
            vehicleList.add(vehicle);
        } catch (Exception e){ // What exception could we put here?
            throw Exception;
        }
    }

    return false;
}


String disableDealerAcquisition(int dealerID){
    try{
        if this.isAcquisitionEnabled{
            this.isAcquisitionEnabled = false;
            return "ID updated"
        }

        if !this.isAcquisitionEnabled{
            return "Already disabled"
        }
    } catch (ObjectNotFound e){ //may not be the exact exception but that's the idea
        return "Dealership not in record"
      }

}

String enableDealerAcquisition(int dealerID){
    try{
        if !this.isAcquisitionEnabled{
            this.isAcquisitionEnabled = true;
            return "ID updated"
        }

        if this.isAcquisitionEnabled{
            return "Already enabled"
        }
    } catch (ObjectNotFound e){ //may not be the exact exception but that's the idea
        return "Dealership not in record"
      }
}


exportDealershipInventory(int dealershipID){
    for vehicle in vehicleList{
        writeToJson(vehicle);   //Not sure exactly how data is written to a JSON file
    }
}

exportAllDealershipInventories()    //Perhaps we can store all Dealership objects in an ArrayList
    for (Dealership in DealershipList) {
        writeToJson(Dealership + Dealership.exportDealershipInventory())    //Showing the Dealership and all  the
                                                                            //vehicles in it
    }

void showAllDealers(){
    for (Dealership in DealershipList) {
        sout(Dealership)    // Printing Dealership out, alternative would be to write to Json, but is that practical
                            // for a user's interface?
    }
}

String showVehicle(int vehicleID){
    for vehicle in vehicleList:
        if(vehicle.getVehicle_id() == vehicleID){
            return toString(vehicle)
        }
}

JSONtoJavaVehicle(JSON File)    //This looks like the data layer's job, but either way, it would need a method
                                //that's perhaps from a static class.

boolean checkIfDealerIsAccepting(JSON File){
    return isAcquisitionEnabled;
}


Questions to ask:

-How will all the dealers be stored? In an ArrayList?

-How will all the vehicles be stored? Also in an ArrayList?

-Where will both of these ArrayLists be stored? Should they be stored in a separate class? Perhaps make that
other class static?

-Shouldn't each dealership object contain an ArrayList of Vehicles? I added that Arraylist in the Dealership class.

-How will we output data to the interface? Through JSON? Perhaps not. Since we're just doing a terminal interface
for now and not GUI, let's just stick to System.out instead of writing to JSON. I don't mean when exporting,
since that should stay as JSON, but when "showing dealers" for example, printing to the terminal is probably
the way to go.

-Question to Data Boys: Will there be a static class that has all the needed JSON elements and operations?
That way, we can use those static methods in a driver when reading and storing JSON files and also when exporting
in the Dealership class. If we have all the methods we will need for JSON in one class, we can just call on them
whenever needed instead of rewriting them everywhere, in effort to apply DRY.


